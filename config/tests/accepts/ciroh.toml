[params]
timestep.length = 1             # Quantity of timestep units for each step (defaults to 10)
timestep.unit = "s"             # Unit timesteps are in (defaults to ms)
timestep.count = 1000000        # Number of time steps to run the simulation for
seed = 42                       # Random seed to use
root = "~/testnet/simulations"  # Root directory to store simulation results 
                                # into (will create a new subdirectory each run)

[links]

# Simulate the connection from the gateway node to the backend as a single link
# to the satellite. Assume once data has gotten to the satellite, everything
# else is instant.
[links.gateway_to_backend]
# This is not accurate to the true satellite as it communicates over
# the air, but is more accurate in terms of how we use it (only the
# gateway can send messages since it is the only satellite-enabled node)
signal.shape = "direct"

# Iridium 9603 transmission rate (176 kbps).
transmission.rate = 176
transmission.data = "kb"
transmission.time = "seconds"

delays.processing.rate = 60       

packet_loss.rate = 0.3

[links.lora]
packet_loss.rate = 0.01
transmission.rate = 1         
transmission.data = "kb"

signal.max_range = 4
signal.offset = 2
signal.unit = "km"
signal.shape = "cone"

delays.propagation.rate = "0.1 * x"
delays.propagation.time = "s"
delays.propagation.distance = "km"

[links.lora_bad]
inherit = "lora"
packet_loss.rate = 0.05        

[nodes]
[nodes.gateway]

internal_names = ["satellite"]
position.coordinates = [{}]     # Defaults to all zeroes for position

# The gateway node's satellite communication protocol which accepts packets
# from the TDMA protocol and then transmits them via satellite.
[[nodes.gateway.protocols]]

# Name for the protocol to use as a unique identifier
name = "satcom"

# File system root directory for this protocol.
root = "~/nodes/gateway/satcom" 

# Shell command to run from root at startup.
runner = "make"                 
runner_args = []

# Array of real or internal links this node can accept.
# Only accept data sent over the satellite link name.
accepts = ["satellite"] 

# Array signalling all the outgoing direct link connections.
# [<node>, <link>]
#   - `node`: The name of the node for the direct connection.
#   - `link`: The name of the link to use.
direct = [ 
    # Simulate satellite uplink
    ["backend", "gateway_to_backend"],  
]

# This node performs the TDMA protocol of the gateway, including:
#   - Pushing the time to all leaf nodes
#   - Listening during the TDMA window for node packets
#       - Buffering node packets
#       - Writing packets to the satellite
[[nodes.gateway.protocols]]
name = "tdma"
root = "~/nodes/gateway/tdma"
runner = "make"
runner_args = []
accepts = ["lora"]
direct = [
    ["self", "satellite"],
]

# Array of links to transmis indirectly to other nodes in range
# listening for them
indirect = ["lora"]

[nodes.peripheral]

# Place a peripheral 1km away in each direction
position.coordinates = [
    # These two declarations are equivalent
    { point = [0, 1, 0], orientation = [20, 30, 40]},
    { point = [1, 0, 0], orientation = { az = 20, el = 30, roll = 40}},
    # These two declarations are equivalent. Omit orientation.
    { point = { x = 0, y = -1, z = 0}},
    [[-1, 0, 0]],
]
position.unit = "km"

[[nodes.peripheral.protocols]]
name = "tdma"
root = "~/nodes/peripheral/tdma"
runner = "make"
runner_args = []
accepts = ["lora"]
indirect = ["lora"]

# The "backend" node is used to simulate the packaging of packets by the
# Cloudloop server and storing the data in a Flask web server.
[nodes.backend]

# Backend node that receives the raw satellite packets and packages them up
# like how Cloudloop does to then send to the flask app over HTTP request.
[[nodes.backend.protocols]]
name = "package"
root = "~/nodes/backend/flaskapp"
runner = "make"
runner_args = []
accepts = ["gateway_to_backend"]

# Flask app which gets started and then idly accepts HTTP requests from the
# other node protocol that accepts raw packets and packages them up like
# Cloudloop does. Stores sensor packets locally.
[[nodes.backend.protocols]]
name = "flaskapp"
root = "~/nodes/backend/flaskapp"
runner = "make"
runner_args = []
accepts = []
direct = []
indirect = []
